{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the TD Learning Site, a living guide designed to help analysts and modelers at TD (and beyond) understand how effectively implement processes for macroeconomic modeling, stress testing, and reporting.</p> <p>This guide is:</p> <ul> <li>\u2705 Searchable</li> <li>\u2705 Easy to navigate</li> <li>\u2705 Constantly growing with examples, tips, and pitfalls</li> <li>\u2705 Written in plain Markdown and powered by MkDocs</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>If you're working in EViews at TD and have: - a clever script, - a useful visualization, - or just learned something the hard way...</p> <p>\ud83d\udcac Please share! Contributions are welcome and appreciated.</p>"},{"location":"#maintainer","title":"Maintainer","text":"<p>Created and maintained by Dr. Mauri Hall, as part of an effort to support documentation, training, and collaboration in EViews modeling workflows.</p>"},{"location":"Scenario_Data_Update_Steps/","title":"Scenario Data Update Steps:","text":"<p>What follows is an guide for updating the data used in stress testing at TD.</p>"},{"location":"Scenario_Data_Update_Steps/#1-after-every-qef-meeting-september-and-december-run-the-following-eviews-program-which-will-import-the-relevant-data-into-a-work-file","title":"1    After every QEF meeting (September and December), run the following EViews program which will import the relevant data into a work file:","text":"<p><code>O:\\tdecon\\Risk_team\\QEF_Data\\qef_data.prg</code></p> <p>Create a database in Eviews and name it <code>QEF_Data.edb</code>. Store the data pulled into the work file by <code>qef_data.prg</code>into the <code>QEF_Data.edb</code> database and place the database into the respective quarter folder (e.g. place in the September folder for the September QEF meeting) located in <code>O:\\tdecon\\Risk_team\\QEF_Data\\</code>. </p> <p><code>QEF_data.edb</code> contains the data the stress team uses to fill in any missing data for the rest of the year and for _tdbs (TD Baseline Scenario) forecasts.\u00a0</p> <p>RESULT: a database called <code>QEF_Data.edb</code> located in <code>O:\\tdecon\\Risk_team\\QEF_Data\\September</code> (if the month is September)</p>"},{"location":"Scenario_Data_Update_Steps/#2-back-up-and-then-update-eviews-database-otdeconhdmriskdatariskdatariskdataedb","title":"2  Back Up and then Update EViews database <code>O:\\tdecon\\HDM\\Riskdata\\RISKDATA\\riskdata.edb</code> :","text":""},{"location":"Scenario_Data_Update_Steps/#2a-copy-the-old-otdeconhdmriskdatariskdatariskdataedb-database-into-a-folder-with-the-date-as-its-name-into-otdeconhdmriskdatariskdataarchive","title":"(2a) Copy the old <code>O:\\tdecon\\HDM\\Riskdata\\RISKDATA\\riskdata.edb</code> database into a folder with the date as its name into <code>O:\\tdecon\\HDM\\Riskdata\\RISKDATA\\Archive\\</code>","text":""},{"location":"Scenario_Data_Update_Steps/#2b-update-the-database-by-running-otdeconhdmriskdatariskdatariskdata_1prg-eviews-will-say-uncompressing-file","title":"(2b) Update the database by running <code>O:\\tdecon\\HDM\\Riskdata\\RISKDATA\\riskdata_1.prg</code>. EViews will say \"Uncompressing file\".","text":""},{"location":"Scenario_Data_Update_Steps/#2c-create-a-different-database-for-each-of-the-stress-tests-ccarewstmst-and-store-each-of-these-is-a-copy-of-riskdataedb-placed-into-a-folder-named-with-the-stress-test-and-the-year-eg-ccar_2025-for-ccar-in-2025","title":"(2c) Create a different database for each of the stress tests (ccar/ewst/mst) and store. Each of these is a copy of riskdata.edb placed into a folder named with the stress test and the year (eg <code>CCAR_2025</code> for CCAR in 2025).","text":""},{"location":"Scenario_Data_Update_Steps/#question-is-2c-above-correct","title":"QUESTION: Is (2c) above correct?","text":"<p>All data upload files (i.e. EViews work files) have two tabs.</p>"},{"location":"Scenario_Data_Update_Steps/#question-am-i-running-the-correct-code-i-do-not-see-two-tabs-when-i-run-the-riskdata_1prg-in-the-riskdatacodes-and-i-dont-see-any-tdsb-tabs","title":"QUESTION: Am I running the correct code? I do not see two tabs when I run the <code>riskdata_1.prg</code> in the 'RISKDATA/Codes` and I don't see any tdsb tabs","text":""},{"location":"Scenario_Data_Update_Steps/#d-upload-the-data-in-the-first-tab-to-the-risk-database-located-at-otdeconhdmriskdatariskdata-and-named-riskdataedb","title":"(d) Upload the data in the first tab to the risk database located at <code>O:\\tdecon\\HDM\\Riskdata\\RISKDATA</code> and named <code>riskdata.edb</code>","text":"<p>Note</p> <p>There are actually four database files: <code>riskdata.e0, riskdata.e1a, riskdata.e1b, riskdata.edb</code> but we only need to deal with the <code>.edb</code>.</p> <ul> <li> <p>The <code>first tab</code> in the workfile contains data until the end of the current year (including actuals and baseline forecasts where actuals are missing). </p> </li> <li> <p>The <code>second tab</code> has the alias <code>_tdbs</code>, this contains the baseline for our scenario and needs to be uploaded to all stress testing databases.\u00a0</p> </li> </ul>"},{"location":"Scenario_Data_Update_Steps/#question-do-i-upload-the-_tdbs-tab-data-to-the-databases-located-in-ccar_2025-etc-created-in-otdeconhdmriskdatariskdata","title":"**QUESTION: Do I upload the _tdbs tab data to the databases located in CCAR_2025 etc created in <code>O:\\tdecon\\HDM\\Riskdata\\RISKDATA\\</code>? **","text":"<p>Note</p> <p>How to upload from a workfile to a database: Select data in the work file, right click and select 'store to database' and then select the required database. </p>"},{"location":"Scenario_Data_Update_Steps/#3-the-following-concerns-the-riskdata-folder-otdeconrisk_teamriskdata","title":"3    The following concerns the <code>riskdata</code> folder <code>O:\\tdecon\\Risk_team\\Riskdata</code>","text":""},{"location":"Scenario_Data_Update_Steps/#3a-update-otdeconrisk_teamriskdatazzz_internationalxlsx-with-data-given-from-the-fed-should-be-saved-in-the-supervisory-folder-till-december-same-for-foreign-exchange-file","title":"(3a) Update <code>O:\\tdecon\\Risk_team\\Riskdata\\zzz_International.xlsx</code> with data given from the Fed (should be saved in the\u00a0supervisory folder\u00a0till December (Same for foreign exchange file)","text":""},{"location":"Scenario_Data_Update_Steps/#question-where-is-the-supervisory-folder-located-how-is-the-zzz_internationalxlsx-updated-ie-where-does-one-get-the-fed-data-from-also-as-an-aside-where-can-one-find-the-definitions-of-the-variables-in-the-previously-mentioned-xlsx-file","title":"QUESTION:\u00a0Where is the supervisory folder located? How is the zzz_international.xlsx updated, IE where does one get the FED data from? Also, as an aside, where can one find the definitions of the variables in the previously mentioned xlsx file?","text":""},{"location":"Scenario_Data_Update_Steps/#3b-update-the-data-files-otdeconrisk_teamdata_requests2025datazzz_riskdata-and-otdeconrisk_teamdata_requests2025datazzz_riskdata_eop","title":"(3b) Update the data files: <code>O:\\tdecon\\Risk_team\\Data_Requests\\2025\\Data\\zzz_riskdata</code> and <code>O:\\tdecon\\Risk_team\\Data_Requests\\2025\\Data\\zzz_riskdata_eop</code>","text":"<ul> <li>Open, <code>O:\\tdecon\\Risk_team\\Data_Requests\\2025\\Data\\zzz_data.xlsx</code> This file contains the risk mnemonics and Haver/other program locations for all the data we send.\u00a0</li> </ul> <p>Note</p> <p>_Q is quarterly data.\u00a0_M is monthly data and\u00a0SA needs to get seasonally adjusted. All instructions are also listed on the \"Legend\" tab of <code>zzz_data.xlsx</code>.</p> <ul> <li>Update CoStar data by downloading data from\u00a0<code>https://www.costargroup.com/ccrsi</code>. Copy data from \"Regional\" tab, \"Value-weighted\" columns.</li> </ul>"},{"location":"Scenario_Data_Update_Steps/#question-where-do-i-copy-the-costar-data-to-is-it-copied-to-zzz_dataxlsx","title":"QUESTION: where do I copy the CoStar data to? Is it copied to <code>zzz_data.xlsx</code>?","text":"<p>- Get bbb10y values for the quarter that passed and round it to one decimal place\u00a0: <code>ROUND('O:\\tdecon\\HDM\\HIST\\Financials\\[BofAML_BBB.xlsx]Daily Calculations'!E1538, 1)</code></p>"},{"location":"Scenario_Data_Update_Steps/#question-do-we-take-e1538-or-the-last-number-in-the-column","title":"QUESTION: do we take E1538 or the last number in the column?","text":"<pre><code>- To get the bbb10y data:\n\n- Go on the Daily Tab\n\n- Get data from Bloomberg terminal \u2013 type \"IND\" and select \"IND13 Data Download\"\n\n- Type `C7A4` and `C4A4` and choose \"Yield to Maturity (Conventional)\"\n\n- Copy data to BBB10Y tab in zzz_data\n\n- Make sure we have the most up to date history given by the FED (data should extend until the end of the previous year)\n\n- Get Mortgage rates from `O:\\tdecon\\HDM\\Riskdata\\zzBloomberg Financials\\[FinVarsBloombergCodesData.xlsx]Quarterly Averages`\u00a0 -&gt; refresh Bloomberg terminal and double check by manually calculating average and copy past \"values\" to the quarterly tab then drag the formula on MTG tab in `zzz_riskdata`\n\n- MSCI data from `O:\\tdecon\\HDM\\Riskdata\\zzBloomberg Financials\\[FinVarsBloombergCodesData.xlsx]MSCI` -&gt; refresh Bloomberg terminal, then drag down the formula on MSCI tab in `zzz_riskdata_eop`\n\n- Run R code for fipi data\u00a0and update working directory (line 7).\n</code></pre>"},{"location":"Scenario_Data_Update_Steps/#question-which-r-code-where-is-the-r-code-stored","title":"QUESTION: Which R code? Where is the R code stored?","text":"<p>Note</p> <p>The\u00a0data is very lagged (missing up to 2 quarters usually). Copy the data into the <code>zzz_riskdata</code> file under the <code>FIPI</code> Tab</p>"},{"location":"Scenario_Data_Update_Steps/#3c-the-regionals-file","title":"(3c) The regionals file:","text":""},{"location":"Scenario_Data_Update_Steps/#question-where-is-the-regionals-file-located","title":"QUESTION: where is the regionals file located?","text":"<ul> <li>All Moodys tabs: powertools &gt; account &gt; clear &gt; force refresh &gt; workbook. Then make sure that the data is up to date on the UPD tabs (you'll need to drag down the data each quarter with correct date)\u00a0</li> </ul>"},{"location":"Scenario_Data_Update_Steps/#question-is-the-data-to-be-copied-into-the-regionals-file-or-from-the-regionals-file-into-another-file","title":"QUESTION: Is the data to be copied into the regionals file or from the regionals file into another file?","text":""},{"location":"Scenario_Data_Update_Steps/#4-open-the-programs-folder-in-otdeconrisk_teamriskdata-and-run-the-codes-therein","title":"4 Open the Programs folder in : <code>O:\\tdecon\\Risk_team\\Riskdata</code> and run the codes therein:","text":""},{"location":"Scenario_Data_Update_Steps/#4a-for-all-codes-below","title":"(4a) For\u00a0ALL\u00a0codes below:","text":"<ul> <li>FIRST open the file and change the\u00a0last date\u00a0of the program to the next year (e.g. 2032  would become 2033) and change\u00a0jump-off year\u00a0(change 2024Q2 to 2025Q2) </li> <li>KEEP IT AS Q2\u00a0because we have some Q3 available and some not, wherever it is missing we use baseline data)</li> </ul>"},{"location":"Scenario_Data_Update_Steps/#4b-first-run-otdeconrisk_teamriskdataus_riskdataprg-then-otdeconrisk_teamriskdataca_riskdataprg-then-otdeconrisk_teamriskdataextradata_update_int_varsprg-note-do-this-in-the-order-given","title":"(4b) First run <code>O:/tdecon/risk_team/Riskdata/us_riskdata.prg</code> then <code>O:/tdecon/risk_team/Riskdata/ca_riskdata.prg</code>, then <code>O:/tdecon/risk_team/Riskdata/Extra/data_update_int_vars.prg</code> (NOTE: DO THIS IN THE ORDER GIVEN!)","text":"<ul> <li>Update dates to the quarter we are in/locations. Make sure series/alphas are set to\u00a0\"Average Observations\" and check mark \"no conversion of partial periods\"\u00a0</li> </ul>"},{"location":"Scenario_Data_Update_Steps/#questionthis-is-in-eviews-where-is-the-option-to-choose-for-example-average-observations","title":"QUESTION:This is in Eviews? Where is the option to choose, for example \"Average Observations?\"","text":"<ul> <li>Check whether or not we need to update the location on QEF page (i.e. the location of other economists workfiles) if it exists </li> </ul> <p>Note</p> <p>for <code>ca_riskdata</code> update the string \"data\" line 36 and make sure QEF data location is up to date in QUARTERLY page ** QUESTION:These are all Eviews pages?**</p>"},{"location":"Scenario_Data_Update_Steps/#4c-run-data_update_sum-make-sure-seriesalphas-are-set-to-sum-observations-and-check-mark-no-conversion-of-partial-periods","title":"(4c) Run <code>data_update_sum</code>, make sure series/alphas are set to\u00a0\"Sum Observations\" and check mark \"no conversion of partial periods\"","text":""},{"location":"Scenario_Data_Update_Steps/#4d-run-data_financials","title":"(4d) Run data_financials","text":"<pre><code>    - Update dates/locations. Make sure series/alphas are set to\u00a0\"Average Observations\" and check off \"no conversion of partial periods\"\n     - Update the following highlighted number, it should be available till before the quarter we are currently in, open the file it will be linked to another file, update that\n\n    - Make sure all quarterly data is available for us5y and us10y\n    - Make sure all quarterly data is available in Haver for international yields (all days of the quarter sometimes this data comes in the second week)\n    - Especially au3m as it is daily data updated monthly\n\n\n- Germany r134m1y@intdaily\n- Japan r158m3m@intdaily\n- UK r112m5y@intdaily\n- Australia r193zaq@intdaily, r193ma@intdaily\n</code></pre>"},{"location":"Scenario_Data_Update_Steps/#4e-run-vixmax-make-sure-seriesalphas-are-set-to-max-observations-and-check-off-no-conversion-of-partial-periods","title":"(4e) Run <code>vixmax</code>, make sure series/alphas are set to\u00a0\"Max Observations\" and check off \"no conversion of partial periods\".","text":""},{"location":"Scenario_Data_Update_Steps/#4f-run-riskdata_eop-make-sure-seriesalphas-are-set-to-last-observations-and-check-mark-no-conversion-of-partial-periods","title":"(4f) Run <code>riskdata_eop</code>, make sure series/alphas are set to\u00a0\"Last Observations\" and check mark \"no conversion of partial periods\"","text":"<pre><code>    - Make sure all quarterly data is available to exchange rates\n</code></pre> <ul> <li>Run <code>us_regionals</code> and <code>ca_regionals</code>, make sure series/alphas are set to\u00a0\"Average Observations\" and check mark \"no conversion of partial periods\".<pre><code>- Make sure any data we are getting on the QEF page from the economist's wf directly is up to date (might need to change location or quarter alias)\n</code></pre> </li> </ul>"},{"location":"Scenario_Data_Update_Steps/#4g-us-regionals-double-check-they-are-seasonally-adjusted-to-latest-quarter-in-haver-td5-h-sa-core-logic-hpi-if-not-use-this-location-to-update-otdeconhdmsa_corelogic-updxlsx","title":"(4g) US regionals: double check they are seasonally adjusted to latest quarter in haver: TD5 -&gt; \"H SA Core Logic HPI\" if not use this location to update: <code>O:\\tdecon\\HDM\\SA_CoreLogic UPD.xlsx</code>","text":""},{"location":"Scenario_Data_Update_Steps/#4h-lastly-we-have-volumes-run-us_volumes-and-ca_volumes-make-sure-seriesalphas-are-set-to-average-observations-and-check-mark-no-conversion-of-partial-periods","title":"(4h) Lastly, we have volumes, run us_volumes and ca_volumes, make sure series/alphas are set to\u00a0\"Average Observations\" and check mark \"no conversion of partial periods\".","text":"<pre><code>    - For CA_Volumes update the following location/alias:\n</code></pre>"},{"location":"about/","title":"About This Guide","text":"<p>Welcome to the TD Stress Testing Learning Site, a living guide designed to help analysts and modelers at TD (and beyond) understand how to use EViews effectively for macroeconomic modeling, stress testing, and reporting.</p> <p>This guide is:</p> <ul> <li>\u2705 Searchable</li> <li>\u2705 Easy to navigate</li> <li>\u2705 Constantly growing with examples, tips, and pitfalls</li> <li>\u2705 Written in plain Markdown and powered by MkDocs</li> </ul>"},{"location":"about/#contributing","title":"Contributing","text":"<p>If you're working in EViews at TD and have: - a clever script, - a useful visualization, - or just learned something the hard way...</p> <p>\ud83d\udcac Please share! Contributions are welcome and appreciated.</p>"},{"location":"about/#maintainer","title":"Maintainer","text":"<p>Created and maintained by Dr. Mauri Hall, as part of an effort to support documentation, training, and collaboration in EViews modeling workflows.</p>"},{"location":"commands/","title":"Commands and Programming Reference Chapter 1","text":""},{"location":"commands/#every-command-in-eviews-falls-into-one-of-four-categories","title":"Every command in Eviews falls into one of four categories:","text":"<ul> <li>object declaration/assignment, </li> <li>object view/procedure view, </li> <li>interactive commands (these create unnamed objects), </li> <li>auxiliary commands (these are commands that do not specifically pertain to objects, eg 'store').</li> </ul>"},{"location":"commands/#command-capture","title":"Command Capture:","text":"<p>when you point and click this window captures the commands being used. To activate: display command capture window by clicking on Window &gt; Display Command Capture Window from the main EViews menu.</p> <p> Figure 1.1: How to display the Command Window</p> <p>To echo any commands in this window, go to Options &gt; General Options and click on the Command settings.</p> <p></p> <p>Figure 1.2: Setting up the Command Window to Echo Commands</p> <p>You can then save the contents by copy and paste or right clicking and saving directly. Some EVews commands are not capture enabled (because of course there are exceptions, EViews loves exceptions to their rules!).</p> <p>Note</p> <p>The insertion cursor can be at any place in the line of code you wish to execute, once the user hits enter that line will execute (even in the middle of a line of code).</p> <p>Scroll up and down previous commands using CRTL + UP  or CRTL + DOWN respectively.</p> <p></p> <p>The Command Explorer window (appearing on the far left of the screen) allows for a way to display context specific documentation while working in Eviews.</p> <p> Once the window is opened, clicking on the name of an object type will open a documentation page for that object in a browser window.</p> <p>For example, if a user wanted to know what the command <code>@recode</code> does they can go to the command explorer and this will take them to the Eviews website:</p> <p></p> <p></p> <p>Note the wildcard \"*\" can be used for search for commands.</p> <p>If a workfile is open you can use CRTL + SPACE to autocomplete commands and for objects (the manual claims this but it can be buggy).</p> <p>Many commands can be linked together and saved as a program. File &gt; New &gt; Program will start a new program.</p>"},{"location":"commands/#object-declaration","title":"Object declaration:","text":"<p>Object_type(options) object_name, below are all the possible types of object in Eviews.</p> <p></p> <p>The various object types :</p> <p>To create an object we start the code with the object type. </p> <p>For example, to create a series called lgdp we would use:</p> <p><code>series lgdp</code></p> <p>To create an equation called eq1 one would use:</p> <p><code>equation eq1</code></p>"},{"location":"commands/#declaring-matrices-and-coefs","title":"Declaring matrices and coefs:","text":"<p><code>matrix(m, n) x</code>  creates an empty m by n matrix named x</p> <p><code>coef(10) results</code>  creates a 10 element coefficient vector named results</p> <p>Object assignment: \"=\"  assigns a value or values to an object.</p> <p>For example: </p> <p><code>series new_series = 0</code> creates a series (whose length is determined by the sample size using the <code>smpl</code> function) which contains zero as every entry. </p> <p>Note</p> <p>In order to tell Eviews which data to work on use the <code>smpl</code> function like so: <code>smpl 1990q1 2025q1</code>. Users can select the entire sample using <code>smpl @all</code> and can select from the beginning or to the end useing <code>@first</code> and <code>@last</code> respectively.</p> <p>For example, to select from the second quarter of 2005 to the end of the data series type</p> <p><code>smpl 2005q2 @last</code></p> <p>When ready to work with the entire data set remember to use</p> <p><code>smple @all</code></p> <p>Warning</p> <p>If you have the sample set (using the <code>smpl</code> command) to only a part of the data set then any commands given will apply only to that sample of the dataset! Always use <code>smpl @all</code> when finished altering a subsample of the dataset. </p>"},{"location":"commands/#object-commands","title":"Object Commands","text":"<p>These can be used to modify existing objects, for example <code>eq1.ls log(cons) c x1 x2</code>  this estimates an equation by OLS (LS  for 'least squares\")</p> <p>To add to systems or groups use the following (similar to methods in Python OOP)</p> <p><code>sys1.append y = c(1) c(2)*x</code>  this adds the equation to the system called sys1 <code>group01.add gdp cons inc g x</code> this adds the variables to the left of .add to the group named goup01</p> <p>We can change the values in a series in a single command by specifying the sample period <code>smpl @first 1979</code> <code>eries dummy = 1</code>  this will make all values from the first obs to the obs at 1979 to equal 1</p> <p></p>"},{"location":"commands/#commands","title":"Commands:","text":"<p>show displays, do executes procedures, if the object window is already open then show is the same as do, freeze creates a table or graph of the object view and print prints the object view window.</p> <p>Note</p> <p>The show action is assumed for view commands and do is assumed for procedures. </p> <p>For example <code>gdp.line</code> is the same as <code>show gpd.line</code> (which creates a line graph of the variable named gdp)</p> <p>Another example:</p> <p><code>eq1.ls cons c gdp</code> is the same as <code>do eq1.ls cons gdp</code></p> <p>The <code>print</code> command can be used to print and the <code>print(l)</code></p>"},{"location":"commands/#freeze","title":"Freeze:","text":"<p> <code>freeze gdp.line</code>creates and untitled graph or table from a view specification, but <code>freeze(figure1) gdp.bar</code> creates a bar graph named figure 1.</p>"},{"location":"commands/#some-examples-of-object-commands-that-can-be-used-on-series","title":"Some examples of object commands that can be used on series:","text":"<p><code>Sheet</code>, <code>hist</code>, <code>freq,bar</code>,  <code>correl</code>, <code>lrvar</code>, <code>uroot</code>, <code>stats</code>, <code>label(r)</code>   shows a spreadsheet, histogram, bar graph, correlation, unit root test, or labels the series respectively.</p> <p>Every object has native Data Members which can be retrieved using the following after \".\" and the variable name </p> <p> </p> <p>Groups also have <code>@count</code> which returns the number of objects in the group.</p> <p>Equations have members like <code>@r</code> (r -squared) or <code>@f</code>(f-statistic).</p>"},{"location":"commands/#interactive-commands-these-create-new-unnamed-objects","title":"Interactive commands: these create new unnamed objects:","text":"<p>For example:</p> <p><code>ls y c x1 x2</code>   will run OLS  y = c  + beta_1x1 + beta_2x2 and create an untitled equation object to hold the results</p> <p>Example 2: </p> <p><code>scatt x y</code>  creates a group and a scatterplot (unnamed).</p> <p>Warning</p> <p>Unnamed object scannot be referenced by name, saved to disk or deleted EXCEPT though the graphical Windows interface! Using named objects is typically preferred if using code to control Eviews.</p> <p>In contrast to the above we can do the following</p> <p><code>equation eq1.ls y cy x1 x2</code> and now the equation is named eq1</p> <p>We can also do:</p> <p><code>group mygroup x y</code>  now the group is named mygroup</p> <p><code>mygroup.scat</code></p>"},{"location":"commands/#aux-commands","title":"Aux commands:","text":"<p>Aux commands are commands such as \"store\"  (to save a file) that do not pertain to a particular object . Syntax: command(option_list) argument_list</p>"},{"location":"commands/#workfiles-and-databases","title":"Workfiles and Databases","text":"<p><code>wfcreate</code>  this creates a new workfile (followed by the name of the new workfile and an option for frequency of the data)</p> <p></p> <p>For example:</p> <p><code>wfcreate macro1 u 1 1000</code>  creates a workfile called macro1 which is undated/unstructured and contains 1000 obs</p> <p>while</p> <p><code>wfcreate macro1 q 1965q1 2025q4</code>  creates a <code>quarterly</code> workfile from the first quarter of 1965 to the last quarter of 2025.</p> <p>The letters \"wf\" precede workfile commands, thus in order to open a workfile we use <code>wfopen</code>, to save use <code>wfsave</code> (eg: <code>wfsave a:\\my_work_file</code>).</p> <p>Note</p> <p>To close a workfile we use <code>close my_work_file</code> (not wfclose as one might guess)</p>"},{"location":"commands/#databases","title":"Databases","text":"<p>Databases are referred to as 'db' so <code>dpcreate</code> creates a database while <code>dbopen</code>opens a database etc (TODO: Add database commands)</p> <p>Note</p> <p><code>db</code> ttself is a command.  <code>db C:\\evdata\\usdb</code> opens a data base called usdb if it already exists and creates one if it does not exist.</p> <p>Other useful commands: <code>dbrename</code>, <code>dbdelete</code>, <code>dbcopy</code></p>"},{"location":"commands/#managing-objects","title":"Managing Objects:","text":""},{"location":"commands/#copying","title":"Copying:","text":"<p><code>copy source_name destination_name</code></p> <p>Note</p> <p>The <code>source_name</code> and <code>destination_name</code> can contain a full workfile address starting with a page name and then a variable name. EG <code>copy page1/var1 page2/var2</code> would copy var1 on page1 to var2 on page2.</p> <p>Note</p> <p>Eveiws supports wildcards: * for multiple characters and ? for single characters. The patterns must match (see below).</p> <p></p> <p></p> <p><code>rename source_name destination_name</code></p> <p><code>delete name_pattern</code>  deletes the objects with this PATTERN (can use wildcards here)</p>"},{"location":"commands/#fetch","title":"Fetch:","text":"<p><code>fetch(option_list) object1 object2</code> (however many objects)  to specify a particular database use the \"d=\" option or the \"::\" extension (same for the store command).</p> <p>TODO : add more detail on how to access databases.</p>"},{"location":"glossary/","title":"Glossary","text":""},{"location":"glossary/#eviews-glossary","title":"Eviews Glossary","text":"<ul> <li>! = \"bang\" (so the control variable <code>!i</code> is called \"bang eye\")</li> <li>AF = add factor  </li> <li>AR = autoregressive  </li> <li>Coefs = coefficients  </li> <li>Endo = endogenous  </li> <li>Endovars = endogenous variables  </li> <li>Eqn = equation  </li> <li>Exo = exogenous  </li> <li>Exovars = exogenous variables  </li> <li>Fexovars = Future realizations of Exogenous Variables  </li> <li>LHS = left hand side  </li> <li>Obs = observations  </li> <li>RHS = right hand side  </li> <li>S = scenario/scenarios  </li> <li>SD = standard deviation  </li> <li>SS = solution set  </li> <li>Vals = values  </li> <li>VAR = vector autoregression  </li> <li>Vars = variables  </li> </ul> <p>NOTE: References to page numbers are given either as a book page (the number printed on the page) or as the PDF page (the page number in the PDF file). The section in italics walks through an example model given in the user guide.</p>"},{"location":"glossary/#stress-testing-glossary","title":"Stress Testing Glossary","text":"<ul> <li> <p>Actuals = \"Raw data\" (I.e. not forecasts)</p> </li> <li> <p>CCAR = \"Comprehensive Capital Analysis Review\" (US Stress testing framework, linked to DFAST)</p> </li> <li> <p>DFAST = \"Dodd-Frank Act Stress Test\" (legal framework under which CCAR is done)</p> </li> <li> <p>EWST = \"Enterprise Wide Stress Test\" (TD internal stress testing framework)</p> </li> <li> <p>MST = \"Macro Stress Test\" (Canadian stress testing frame work, linked to OSFI)</p> </li> <li> <p>OSFI = \"Office of the Superintendent of Financial Institutions\" (regulates financial institutions in Canada)</p> </li> </ul>"},{"location":"graphs/","title":"Graphs","text":"<p>Chapter 2 Graphs TODO</p>"},{"location":"modeling/","title":"Modeling & Forecasting","text":"<p>MODELS</p> <p>User Guide II: Chapter 49 on PDF page 1016, book page 995.</p> <p>What is a model in EViews?</p> <p>A model is a set of equations that jointly describe the relationship between a set of vars. These equations are combined into a single Model object in Eviews. Models allow for the simulation of different assumptions about variables that are determined outside the model (I.E. exogenous variables or \"exovars\").</p> <p>A model in its most general form is F(y,x) = 0 where F is a vector of (real valued) functions, y is the endogenous variables and x is the exogenous variables. F is defined as LHS (Endogenous variables) minus RHS (usually a linear combination of Exogenous variables) and therefore F = 0 means RHS = LHS for the system.</p> <p>Each eqn must have a unique endovar attached to it (on the LHS).</p> <p>In Equation (49.2) y_i is the unique endogenous variable, f_i(y, x) is the function for that endogenous variable and this function depends on any or all other y and any or all other x in the system. For example, if GDP at time t is y_i then on the RHS we could have GDP_(t-1) as a y argument in f_i.</p>"},{"location":"modeling/#equations","title":"Equations:","text":"<p>Equations can be inline or linked. Inline equations are written in as text, whereas linked equations bring specification from an external EV object (e.g. an estimation object or even another Model object).</p>"},{"location":"modeling/#example","title":"EXAMPLE:","text":"<p>Equations can be stochastic or identities. </p> <p>Identities hold exactly, stochastic relationships hold with a random error.</p>"},{"location":"modeling/#solving-the-model","title":"SOLVING THE MODEL","text":"<p>If you solve a given model then: given exogenous variables X, EVeiws 12 will find values Y that satisfy the system. (Solving does NOT mean finding coefficients that minimize a loss function, solving means finding values of the endovars that satisfy the entire system, the coefs are fixed, either user specified or solved previously).</p> <p>When solving a model, Eviews must first associate data with each variable in the model: Eviews binds each of the model variables to a series in the workfile (the software creates aliases when binding, e.g. Y becomes Y_0). Eviews then solves the model for each observation in the selected sample and places the results in the corresponding series.</p>"},{"location":"modeling/#aliasing","title":"Aliasing:","text":"<p>When a model is solved, aliasing is usually applied to the endogenous variables so that historical data is not overwritten. For models which contain lagged endogenous variables, aliasing allows users to bind the lagged variables to either of the following: (1) the actual historical data (this is called a static forecast) (2)  the values solved for in previous periods (this is called a dynamic forecast).</p> <p>Either way the lagged endogenous variables are treated as exogenous variables when solving the model for a single period.</p> <p>Aliasing is also applied to exovars when doing S (scenarios). Creating a S means creating changes to exovars or AFs (add factors) (AFs are manual changes made to the residuals of a system eqn or change made directly to the endovars. In either case the results is directly altering the output of the model. That is to say,  AFs change the forecast endovar vals after solving a model. )</p>"},{"location":"modeling/#how-do-scenarios-s-work","title":"How do Scenarios (S) work?","text":"<p>In a S users can change the path of an EXOGENOUS VARIABLE by OVERRIDING the variable. (Contrast this with the role of an AF which is to change the Endogenous variables \u2013 IE the model's output \u2013 directly). When an exovar is overridden under a given S, the variable is copied and given a suffix (e.g. _25A) \u2013 this is called binding. For example: If we have a historical endovar called Y, a given historical exovar might be called X.  In that case when we run the model Y with to create a forecast (called a baseline forecast because we have not altered any exovars \u2013 in our example, we have not altered X) Eviews will create a forecast and bind it to a variable with a \"_0\" suffix, in this case Y_0.</p> <p>If we then create a Scenario (by default called Scenario_1) then we can alter override X and run a new forecast using an altered X. The altered exovar X will be bound to a new series and given a suffix (Eg in this case it might be called X_1) and the new forecast values (and historical values) for Y under Scenario_1 will also be bound to a new variable and given a suffix (by default the suffix is \"_1\" making the new variable Y_1.)</p> <p>note !!     Key Take Away:  under a baseline scenario we have one set of (usually accurate historical) values for exovars  X which lead to a baseline forecast for Y. In this process Eviews creates a new series for Y adds the suffix \"_0\" to create  Y_0.  If we then create a Scenario (by default called Scenario_1) by overriding X this means we are altering historical X and this altered version is bound to a variable with a suffix (\"_1\" by default)  say X_1. This change in X (the altered series is called X_1) leads to new forecasts for Y, which Eviews will label Y_1( by default).</p> <p>note !!     Users can create user defined suffixes for scenarios in Eviews,  at TDE we use suffixes that indicate the scenario (by letter) and the year, eg \"_25A\" for scenario A in 2025.</p>"},{"location":"modeling/#summary-y-is-actual-historical-data-for-endovar-y","title":"Summary: Y is actual historical data for endovar Y,","text":"<p>Y_0 is solved Y using historical (unchanged) exovar X  (nothing has yet been overridden) X1 is Scenario 1 exovar (ie X has been overridden, a copy was made and differs from X, this copy is called  X_1 contains the values of X that have been altered in accordance with a given scenario, say Scenario_1) . Y1 is a series of endogenous values created when solving Eviews solved Scenario_1, IE solved the model using X_1 rather than X. Note that in practice we would end up with a suffix something like \"_25A\" rather than \"_1\" leading to variable names such as Y, Y_0, Y_25A,  X and X_25A.</p>"},{"location":"modeling/#add-factors-afs","title":"ADD FACTORS (AFs)","text":"<p>AFs are a special kind of exovar used to shift the output of an equation. In a Scenario we are changing the values in X (Eviews will make a copy and call this X1). X1 is used when solving the model which changes the input(s) of the model and therefore changes the output which is bound to an alias Y_1, but the change happens indirectly through changing exogenous variables.</p> <p>Using an Add Factor under any given scenario changes the values in Y directly (either by adding the AF to the residual of the equation or adding the AF to the endovar directly). Rather than creating a copy of the endovar series Eviews binds the AF to a new variable with _A as a suffix.</p> <p>Thus if we have Y as historical data, Y_1 as Y under Scenario 1 with X_1 as X under Scenario 1 and we then use an AF we will have Y_A as a separate series that tells is how Y_1 was altered.</p>"},{"location":"modeling/#modelling","title":"MODELLING","text":"<p>EXAMPLE MODEL (TODO: make clearer and add pictures of steps taken) Having set up a model we can solve it as Deterministic for simulation type (deterministic means there is no simulation of errors and therefore no SD bands included in the simulation) and under Dynamics we can select Static. Dynamics = Static means we are looking at one step ahead forecasts over the existing data.</p> <p>Under \"Solution Sample\" set the sample over which to solve the model to avoid using missing values. Once solved the results for the ENDOVARS are placed into a series in the workfile their names are determined by the aliasing given by the user.</p> <p>PICTURE OF THE WINDOW IN WHICH DETERMINISTIC IS CHOSEN HERE In Variable View each variable is given a type (En for endo. X for Exo, and A for add factor (double check this). If the variable is black it is an EXOVAR, if it is blue it is being \"traced\" ( \"traced\" means  that the intermediate values of the variable obtained during solving the model are stored, usually used for diagnosing why a model does not converge) and if a variable in the variable view is red it is being overridden  this means there is an altered version of the exovar that is being used. PICTURE OF THE VARIABLE VIEW WITH VARIOUS TYPES OF VARIABLES HERE</p> <p>Why have a variable view? For endovar Y we may have actual Y called Y, baseline forecast  Y called Y_0, scenario 1 (or scenario A) forecast values of Y called Y1.</p> <p>We can make graphs for actual and fitted values as follows: select variables (ctrl + click) and use proc &gt; make graph. Be sure to set the correct sample in Sample For Graph.</p> <p>Example of static solution, one step ahead forecast:</p> <p>Performing a Dynamic Solution:</p> <p>We use this to forecast past actual historical data and therefore use our own forecasted values as the basis for subsequent forecasts.  To reiterate, here we are doing forecasts at multiple horizons and using forecast values as the basis for the multi step forecast. To do this click \"solve\" in the Model window (i.e. open the model by double clicking it) and then choose \"Dynamic solution\" in the Dynamics section of the dialog. If our data goes up to 1999 and we select 1985 1999 in the solution sample then the model forecasts using HISTORICAL EXOVARS but FORECASTED ENDOVARS for those periods.  To reiterate, if we do dynamic forecasts over a period where we have actual exovar data then the system uses forecast endovar vals but actual exovar data, this is therefore counterfactual with respect to the exovars since in a real forecast we would have perfect insight into the future values of the exovars of the future.</p> <p>This means our forecast shows how well the model would have worked under a very specific set of assumptions: (1) we use our model to forecast future endovar values, (2) we use our forecast endovar values to compute future forecasts (3) we have perfect knowledge of the future values of the EXOVARS until the end of our sample.</p> <p>USING THE MODEL TO FORECAST FUTURE VALUES OF THE ENDOVARS (into the future for which we do not have exovar data)</p> <p>Chose values for the exovars, these are not forecast, they MUST be chosen by the user. Use these forecast values of the exovars to update our forecasts of the endovars.</p> <p>For example, we might forecast G using an ar regression on log(g).</p> <p>A Note on AFs: AFs do NOT set the values of the exovars, rather these directly change the forecast values (by changing the residuals in the modelling eqn or the values of the Endovars directly).</p> <p>Using Scenarios for Alternate Assumptions:</p> <p>How to see what the model will output (i.e. what values the forecast endovars will take on) with different assumed future exogenous variables? We don\u2019t want to edit the historical data or change the variables back and forth so we can use Scenarios (S). These keep track of the different paths we assumed for exovars without writing over the data.</p> <p>In a S you can choose to change a subset of the exogenous variables while leaving the rest unchanged (and can choose to alter only a subset of any given exovar also). This is to say you can change as much or as little of the exovars as you wish when creatin a S.</p> <p>When the S is solved the values of the ENDOVARS are saved in the workfile with a given suffix ( the suffix \"_1\"  is the default but this can be changed by the user, we use  for example _25A for scenario A in 2025).</p> <p>Two special scenarios always exist by default: Actuals and Baseline. Neither of these can have overridden variables (meaning the EXOVARS cannot be changed, not sure about add factors here). Using the Actuals writes to the original historical data vars (careful not to overwrite existing data!), Running a Baseline S appends _0 to the vars (ie Baseline works with copies of the original data).</p> <p>Create a Scenario: (see page 1032 of the PDF). Override some exovars by listing them in 'override' with spaces between each. These will now appear as red in the variable view of the Model . Users can give them another suffix besides the default \"_1\" under aliasing tab of the scenarios dialog.</p> <p>In our Baseline forecast we had to make assumptions about the values of fexovars (Future realizations of Exogenous Variables).</p> <p>In Scenario 1 we simply make different assumptions about fexovar values and write these new assumed fexovar values into X_1 (where X is the historical actual exovars, X_0 is the historical exovar values plus the baseline assumed fexovar values and X_1 is the fexovar vals under Scenario 1).</p> <p>Make sure to check \"solve for alternative along with Active\" when solving. Make sure also that the Scenario 1 (or whichever S the user is interested in) is active and Baseline is selected the alternative. Also be sure to select the solution sample eg 2000 2005.</p> <p>Look at the results: proc&gt; make graph. Set model variables to Endogenous variables. Set Solution series to Deterministic solutions and check both Active and Compare solutions check boxes. Active S1, Alternative BL. (Scenario 1 and Baseline respectively).</p> <p>BUILDING A MODEL</p> <p>Method 1: Create using Object &gt; New Object and choose Model</p> <p>Method 2:  select a set of estimation objects (eqns, VARs, system_ and right-click and choose Open as Model.</p> <p>Add equations by either selecting insert if by inputting the equation by text or drag and drop from the work file window into the model.</p> <p>Linking Equations to model objects:</p> <p>Use proc&gt;Link to play with linking and unlinking (see PDF page 1036 for details)</p> <p>Working with Model Structure (PDF page 1036)</p> <p>There are two primary Model views: Equation View and Variable View</p> <p>Eqn View: each line shows a linked object or inline (text) eqn.  If there is an issue it will show up here as an error with a red line over the eqn.  Examine eqns using right-click on the eqn and selecting Properties (PDF page 1037 of user guide 2 for Eviews 12). You can also use ctrl F to bring up the Model Find dialog where you may search for eqns by name. Variable View is used for adjusting options for variables and for displaying and editing series associated with the model NOTE: The only way to add a variable or to change the type of a variable in the model is to modify the model equations. In the variable window you can also see dependencies between variables by clicking Dependencies. There is also TEXT VIEW: this shows the entire structure of the model.  The lines contain the eqns of the model. A line beginning with a : represents a link to an external object. A line beginning with @ADD specifies an add factor.</p> <p>The add factor command is of the form @add(v) endo_var add_factor.</p> <p>NOTE: The option (v) is used to specify that the add factor should be applied DIRECTLY to the endovar . By default, the add factor is added to the residual of the equation.</p> <p>(See book page 1028, PDF page 1049 for the section on Add Factors).</p> <p>A line beginning with @INNOV denotes an innovation variance which can be applied to the enovar using @innov endovar number where \"number\" is the Standard Deviation of the innovation applied during stochastic simulation. See PDF page 1040 of Guide 2.</p> <p>Dependency Graph View( PDF page 1043).</p> <p>Specifying Scenarios (PDF page 1045):</p> <p>The most important function of a S (scenario) is to specify which series will be used to hold the data associated with a particular solution of the model. Aliasing allows the user to specify the alias appended to the series name (eg _25A for S_A in 2025) . S are specified by declaring which EXO variables are to be override (IE altered from their historical values). Overridden variables will draw their data from the series with the alias attached (eg \"_1\" or\" _25A\") and other exovars will draw from the series with the same name as the variable (IE variables that are not overridden contain historical data).  overridden variables are the exovars being used to generate a different S. Using a S one can exclude ENDO variables as well.  When an endovar equation is dropped, the value of the variable is taken directly the workfile series with the same name.  This basically makes the ENDOVAR into an EXOVAR for the purposes of modelling.</p> <p>Scenario Editing tools (PDF page 1047)</p> <p>Edit override right button menu item available from the variable view of a model lets a user exclude, override and edit ENDO and EXO vars for the current S.</p> <p>In a Model object using the View button shows all S and the exclusions and overrides therein.</p> <p>Using Add Factors (PDF page 1049, book page 1028)</p> <p>An Add Factor (AF) is an extra EXO variable that directly affects ENDO results.  The most common use for AFs is to provide a smoother transition from historical data into the forecast period. Typically, add factors will be used to compensate for a poor fit of one or more equations of the model near the end of the historical data, when we suspect this will persist into the forecast period. Add factors provide an ad hoc way of trying to adjust the results of the model without respecifying or reestimating the equations of the model.</p> <p>The third form is f(y_i \u2013 a) = f_i(y, x) which means altering y inside of a function in stead of altering the residual as in 49.4.</p> <p>Note that if we use @add then we are adding to the residual (RHS) but if we use @add(v) we are adding the LHS of the eqn. This is only important if the LHS contains a transformation of the variable e.g. log(g), then @add(v) adds to g and the output is log(g) so the new output is log(g - a) where as the command @add adds directly to log(g) ( so the new output is log(g) = f_i(y, x)  + a.</p> <p>How To Include Add Factors:</p> <p>The Easier (local) method of creating AFs: Go to the equation view of the model and double click the equation of interest. Eqn Properties &gt; go to Add Factors tab. In the Factor type box select whether you want to shift the residual (y_i = f_i(y, x) + a ) or shift the ENDOVAR (eg log(g -a) = f_i(y, x)). Click Yes to create the series that holds the add factor. It will be filled with NAs. Initialize the Add Factor:</p> <p>Still in the Eqn Properties box click the Initialize Active Add Factor Button.</p> <p>Zero: will set all the values of the AF (Add Factor) to zero. So that this equation has no residuals at actuals: this sets the values of the add factor, so the equation is exactly satisfied without error when the variables of the model = values in the actual series. So that this equation has no residuals at actives: this sets the vals of the AF such that the equation is exactly satisfied when the model vars = values I in the ENDO and EXO vars associated with the active S. So model solves the target variables to values of the trajectory series: this sets the vals of the AF such that an ENDOVAR of the model follows a particular target path then the model is solved.</p> <p>Set the sample over which the AF should initialized by modifying the Initialization sample box. NOTE: if an AF is present for a given S, then it will be present for every S, but can be overridden for a particular S just like an exovar. (QUESTION: this means you cannot run the Baseline if the AF for any S is missing?)</p> <p>The Harder (global) method of creating AFs:  Initialize or override Afs for ALL equations in the model at the same time. Proc &gt; Add Factors does this. EG to create a complete set of Afs that make the model solve to actual values over history use Add Factors &gt; Equation Assignment\u2026 to create AF for every equation, then use Add Factors  &gt; Set Values\u2026 to set the Afs so that all the equations have no residuals at the actual values.</p> <p>Locking the Model: This disables changes to the model. Proc &gt; Protect/Unprotect model. When you first lock the model you will have to put in a password with min 4 characters. Putting a pw locks down backward compatibility and also shuts down some functionality (see PDF page 1051).</p> <p>Solving the Model When solving the model a number of steps are taken The Block Structure of the model is analyzed (see PDF page 1039). Variables are bound to series in the workfile, according to the override settings and name aliasing rules of the S. If an endovar is being tracked then a new series will be created, if not a temp series will created (QUESTION: what do you mean \"tracked\"?) EQNs of the model are solved for each obs in the solution sample using iterative algos to compute the values of the endovars. Temp series are deleted. Results are rounded. See PDF page 1052 for Stochastic simulation and for leads and lags for endovars.</p> <p>See PDF page 1055 for Initialization Methods (back casting for models with MA)</p> <p>Basic Options (For solving)</p> <p>To solve click Solve.</p> <p>This is the most important part to set for application.</p> <p>Simulation type: Deterministic means all equations in the model are solved so that they hold without error during the sim period, all coefs are held fixed at their point estimates and all exovars are held constant. Result = single path for endovars which can be evaluated by solving the model once. Stochastic means all the equations are solved so they have residuals which match randomly draw errors and (optionally) the coefs and exovars are also varied randomly. The model generates a distribution of outcomes. NOTE: solve the model deterministically at first to be sure it is behaving as expected and then solve stochastically.</p> <p>Dynamics box: Determines how Eviews uses historical data for enovars when solving the model. If Dynamic solution is chosen then only vals of the endovars from BEFORE the solution sample are used when forming the forecast. This means lagged endovars and ARMA terms are calculated using calculated solutions from previous periods NOT THE ACTUAL HISTORICAL VALS!. A dynamic solution is typically correct to use when forecasting values several periods into the future.</p> <p>Static solution means values of the endovar up to the previous period are used each time the model is solved. Lagged endovars and ARMA terms are base don actual values of the endovars. A static solution is correct when producing a set of one-step ahead forecasts over the historical data to examine historical fit. A static solution cannot be used to predict more than one obs into the future!</p> <p>Fit means endovars for the current period are used when the model is solved. All endovars except the one var for the equation being evaluated are replaced with their actual values. Fit is used to examine the fit of EACH of the equations in in the model when considered separately, IGNORING THEIR INTERDEPENDENCE IN THE MODEL.</p> <p>The fit option can only be used for periods when historical values are available for all the endogenous variables.</p> <p>Structural checkbox: can ignore any ARMA specifications that appear in the model equations.</p> <p>At bottom LEFT of the dialog is a box for the solution sample. The SS is the set of obs over which the model will be solved. Unlike in some other EViews procedures, the solution sample will not be contracted automatically to exclude missing data and the model wont run without data available for all exovars over the SS.</p> <p>RHS of the dialog are controls for selecting which scenarios we would like to solve. Select Edit Scenario Options buttons users can examing settings of an S. The Solve for Alternative along with Active should be used in a STOCHASTIC SETTING where the two S must be solved together. See PDF page 1059 for stochastic options.</p> <p>Tracked variables: PDF page 1063</p> <p>The Tracked Variables page of the dialog lets users change which endovars are being tracked by the model. If a variable is being tracked, it means the results for that variable are saved in a series in the workfile after the simulation is complete. If a variable is not tracked, then nothing is saved from the simulation for that variable. Used for models with large numbers of variables.</p> <p>NOTE: all variables are tracked by default. The traced variables list allows user to specify a list of vars for which intermediate vals wil be stored during iterations of the solutions process. Look at the Trace Output view after the model is complete to see where errors may be coming from if the model is failing to converge.</p> <p>Boundaries: tells the solver to give warnings if any variables cross user specified boundaries. Can be examined in the Check Solution Bounds view once solve is complete. See PDF 1064 for Solver info (algo for solving the model). Working with Model Data see PDF page 1072</p> <p>Types of series available in the model window: actuals, active, alternate.</p> <p>Actuals are historical data for endovars and historical data and baseline forecast for exovars. Active: the workfile series use when solving the active S. for endovars this is the series with a name plus _alias (eg _25A). For exovars it will be the actual series unless overridden. If overridden the exovars will ALSO be series with the alias appended.</p> <p>Alternate: the workfile series that is used when solving the alternate scenario. The rules are the same as for active.</p> <p>Editing and Displaying Data 1073 TODO</p> <p>Managing Data 1075 TODO Comparing solution data 1076 The Compare solutions menu item, (from the View menu) allows users to view any difference between solution values for different S.</p> <p>After solving for different S users can click on View &gt; Compare solutions\u2026 to being up a dialog that allows for comparison of solutions across different S.</p> <p>Choose which vars to compare using the Select drop-down box and the From edit field. Once a var is selected users can select S to compare using the Series to compare area. The first choice using Solution series drop-down chooses between comparing point estimates of deterministic solutions of means of stochastic solutions.</p> <p>The Compare the Active Scenario drop-down allows users to choose vars for comparison.</p> <p>NOTE: changing the S here will change the active S for the model and for the comparison.</p> <p>Users have two choices for specifying the SECOND set of variables. Select a S using the Scenario radio button and then selecting a S OR by selecting Pattern</p> <p>Pattern will match using the wildcard \"\" to represent variable names in the pattern. EG if the current series is I_0 then \"_OLD\" would specify I_OLD.</p> <p>Users can ref a data based using dbname:: syntax.</p> <p>The table lists any variables for which the percentage difference between the two series for each scenario is greater than the specified tolerance. The columns in the table show details about the variables. The first shows the variable name. The second, Delta%, shows the maximum difference between the two series for each variable. The third and fourth columns, \u201cFirst\u201d and \u201cLast\u201d, give the date (or observation number) of the first period in which the two series differ and the last period in which the two series differ. Here, the first period in which M_0 differs from M_1 is 1960Q1, and the last period in which they differ is 1999Q4.</p>"},{"location":"programming/","title":"Programming","text":"<p>CHAPTER 6: EViews Programming</p> <p>Create a new program</p> <p>program program_name Generally each line corresponds to a command so each can be executed pressing enter. One can also execute selected batches by pressing crtl+Enter.</p> <p>To see line numbers press wrap +/- and select Display line numbers.</p> <p>Manually break long lines using the _ character:</p> <p>This will execute as a single line of code (but _ must be the very LAST character on the line for this to work)</p> <p>Comments are formed using the apostrophe before the text. If you wish to commend out (or uncomment) a code block right-mouse click and select Comment Selection or Uncomment Selection respectively.</p> <p>Auto format by selecting right-mouse click and select Format Selection.</p> <p>The Snapshot button creates a manual snapshot of the code (in case things go wrong).</p> <p>Open a program:</p> <p>open program_name.prg</p> <p>OR</p> <p>open \"full file path\"</p> <p>Hit the run button to execute the entire program (each line in order of appearance) or use the run command. EG</p> <p>run program_name</p> <p>OR</p> <p>run full_path_name arg1 arg2 arg 3 (see PDF page 132)</p> <p>To run verbose and specify the max number of errors use</p> <p>run(v, 500) program_name</p> <p>To do so quietly use</p> <p>run(q, 500) program_name</p> <p>Note we can run programs and chose which variables to use at run time. See book page 124,  PDF page 133.</p> <p>run program_name(op1, opt2, opt3=k) arg0 arg1 arg1 (%0 %1 and %2 respectively).</p> <p>Program Variables: two types Control variables (numeric) String variables Control variables are written with a bang at the front (! = bang)</p> <p>EG</p> <p>!x !1 !i !counter</p> <p>These are assigned using the = sign and are not stored as variables.</p> <p>NOTE: control variables are used in programs via text substitution. If EViews encounters a control variable in a program it substitutes the text value of that variable into the program. One of the implications of the text substitution is that you may lose some numeric accuracy when using a program variable due to the conversion in to and out of a text representation of the number.</p> <p>String program variables are text rather than numeric and are stored for temporraty use using the % character</p> <p>%value  = \"value in millions of US dollars\"</p> <p>Used to help build up command text, variable names, or other string values. An assigned string variable may appear in any expression in place of the underlying string.</p>"},{"location":"spools/","title":"Spools","text":"<p>Chapter 4 Spools:</p> <p>Spools combine output data: tables, graphs, text, other spools\u2026this allows us to organize Eviews results as a log of output or for a presentation.  See Ch 18 of Users Guide 1 book page 877.</p> <p>Create a spool &gt;&gt; spool my_spool</p> <p>A new spool can be created by printing to a nonexistent spool!</p> <p>output (s) my_spool  this tells EViews to send all subsequent print jobs to my_spool (see output book page 444 of command manual)</p> <p>After the above command we can do the following:</p> <p>tabl1.print eq1.output(p) output off</p> <p>Tab1 and eq1 will both be appended to my_spool</p> <p>Adding to a spool:</p> <p>output (s) my_old_spool ser01.line(p)  print a line graph of series 1, this is printed because of the (p) command grp01.scat(p) eq1.wald(p) c(1)=c(2)</p>"},{"location":"strings/","title":"Strings","text":"<p>Chapter 5: Strings Use double quotes for a \"string\" in Eviews. The null string is represented as \"\".  The null string can also be represented as a missing value.</p> <p>String Operators:</p> <p>(1) concatenation\u2014plus (\u201c+\u201d) (2) relational\u2014equal to (\u201c=\u201d), not equal to (\u201c&lt;&gt;\u201d), greater than (\u201c&gt;\u201d), greater than or equal to (\u201c&gt;=\u201d), less than (\u201c&lt;=\u201d).</p> <p>When concatenating strings the empty string is ignored (interpreted as a blank string) which means adding \"\" to a string will not change the string.</p> <p>String Ordering: alphabetical ordering places hyphens and aposrophes before alphanumeric symbols. In terms of upper and lower case letters \"a\" precedes \"A\".</p> <p>With strings greater than or less than indicates ordering, note that if the relation is true then the comparison returns a 1 and 0 otherwise:</p> <p>To obtain sections or portions of a string use @left @right and @mid:</p> <p>@upper and @lower turn the string into all upper or lowercase. @ltrim @rtrim and @trim ignore leading spaces (these functions do not trim the string!) The following all return 1:</p> <p>Relational operators treat emptry strings as missing values so comparisons with non-empty strings produce NAs.</p> <p>String Lists: a string with three words would be thought of as having 3 elements. Double quotes are used to denote multi word elements in a string list, which is to say an element in double quotes can have multiple words.</p> <p>\" \"\"this thing\"\" \"\"has exactly\"\" \"\"three elements\"\" \"  a \" begins and ends the string but each multi word element is enclosed in \"\" also.</p> <p>String Functions @length(str)  the number of CHARACTERS in a string @wcount(str)  integer value of the number of string elements in a string list. @wfind(\"I did it\", \"did\")  returns the value 2, because did is the second element in the string list</p> <p>@wfindnc(str)  same as above but not case sensitive</p> <p>@isempty(str)  1 if empty, 0 otherwise @eqna(str1, str2)  1 if strings are equal, 0 otherwise: treats null strings as ordinary blank strings and NOT as missing values!</p> <p>@neqna(str1, str2)  returns 1 if strings are NOT equal and 0 otherwise. @val(str[, fmt]) converts the sting into a numeric value if possible and returns NA otherwise.</p> <p>@dateval(str[,fmt])  converts a string to a date  number (also see @dtoo)</p> <p>String manipulation:</p> <p>@left(str, int)  returns a string containing the int CHARACTERS at the left of the string</p> <p>@wleft(str_list, int)  returns a string containing the int ELEMENTS of a string LIST to the left of the string list. @right and @wright are similar. @mid and @wmid work the same way but require can take int1 and int2 arguments (if int2 is not specified it returns the rest of the characters in the string. @mid(str, int1, int2) and @wmid(str_list, int1, int2)</p> <p>@word(str_list, int)  returns the int element of the string list (@wordq is the same but preserves quotes)</p> <p>@wkeep(str_list, \"pattern_list\") returns the list of elements in str_list that match the pattern in pattern list.</p> <p>EG:</p> <p>@wdrop(str_list, \"pattern_list\") returns a string list without the elements that match the pattern list</p> <p>@replace and @wreplace replace work on string list elements and patterns respectively</p> <p>@replace(str1, str2, str3)  within str1, find str2 and exchange it for str3 . @wreplace(str_list, \u201csrc_pattern\u201d, \u201creplace_pattern\u201d)</p> <p>EG: @wreplace(\"ABC AB\", \"B\", \"X\") replaces all instances of \u201cB\u201d with \u201cX\u201d, returning the string \u201cAXC AX\u201d</p> <p>@wintersect(str_list1, str_list2)  acts like intersection of sets, same for @wunion</p> <p>@wunique(str_list)  removes duplicates and returns the list</p> <p>@wnotin(str_list1, str_list2)  returns all elements of str_list1 that are NOT in str_list2</p> <p>@wsort(str_list[, \"D\"]) sorts elements of a list, use D for sorting in descending order</p> <p>Using strings in Eviews</p> <p>If making a temporarty string use the % character EG</p> <p>%value = \"a string of values\"  this will exist only during the time Eviews is running!</p> <p>If you want the string to exist in general use</p> <p>string string_name = \"a string of values\"</p> <p>Viewing strings: strings can be views as a string (a list of characters) or a word list (a list of elements).</p> <p>String vectors say PDF page 102.</p> <p>Dates see PDF page 103</p>"},{"location":"tables/","title":"Tables","text":"<p>Chapter 3 Tables and Spreadsheets</p> <p>Create a table either by freezing an object view or by issuing a table declaration.</p> <p>Creating a table from another object: combing the view and freeze commands. For example, if grp6.stats shows the stats view of the group grp6 then</p> <p>freeze(name_of_table) grpt.stats  create and displays a table and names it \"name_of_table\" which contains the contents of grp6.stats</p> <p>NOTE if using commands do not create unnamed objects as they you will be unable to reference them.</p> <p>Declaring a table: &gt;&gt; table(10, 20) name_of_table  this creates a table with 10 rows, 20 columns and gives it a name.</p> <p>NOTE: tables can be re-declared to a larger size without destroying data.</p> <p>NOTE ALSO: tables are automatically expended if you try to add outside of their current size, this is different from matrices or vectors which throw an error.</p> <p>The setcell command can be used to alter a single cell in a table.</p> <p>setcell(name_of_table, row, col, content) For example &gt;&gt; setcell(tab1, 9, 12, %label)  this sets whatever is associated with the string \"%label\" into row 9 column 12 of the table named tab1.</p> <p>For tables we can center\"c\" right \"r\" or left \"l\" justify text setcell(big_tab, 1, 1, %label, \"c\") will set whatever is in %label to row 1 col 1 of big_tab and center justify the text.</p> <p>Set width and hieight, formatting, fonts on PDF page 69 \u2013 76.</p> <p>Saving tables: &gt;&gt; tab1.save(t=csv, n = \"NAN\") name_of_saved_table Or</p> <p>tab1.save(r=B2:C10, t=html, s=.05) c:\\data\\mytable2  can select rows and cols to save and also choose the destination of the file</p>"}]}